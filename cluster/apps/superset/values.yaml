#https://raw.githubusercontent.com/apache/superset/master/helm/superset/values.yaml
superset:
  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
      cert-manager.io/cluster-issuer: "letsencrypt-prod"
      nginx.ingress.kubernetes.io/auth-url: "https://auth.hut.sh/oauth2/auth"
      nginx.ingress.kubernetes.io/auth-signin: "https://auth.hut.sh/oauth2/start?rd=https://$host$uri"
      hajimari.io/enable: "true"
    hosts:
      - superset.hut.sh
    tls:
      - hosts:
          - superset.hut.sh
        secretName: my-certs-superset
  postgresql:
    enabled: false
  redis:
    enabled: false
  supersetNode:
    connections:
      redis_host: 'redis-master.redis.svc.cluster.local'
      redis_port: "6379"
      db_host: 'postgresql.postgres.svc.cluster.local'
      db_port: "5432"
      db_user: superset
      db_pass: superset
      db_name: superset
  supersetWorker:
    replicaCount: 1
    autoscaling:
      enabled: false
      minReplicas: 1
      maxReplicas: 100
      targetCPUUtilizationPercentage: 80
    # -- Worker startup command
    # @default -- a `celery worker` command
    command:
      - "/bin/sh"
      - "-c"
      - ". {{ .Values.configMountPath }}/superset_bootstrap.sh; celery --app=superset.tasks.celery_app:app worker"
    # -- If true, forces deployment to reload on each upgrade
    forceReload: false
    # -- Init container
    # @default -- a container waiting for postgres and redis
    initContainers:
      - name: wait-for-postgres-redis
        image: "{{ .Values.initImage.repository }}:{{ .Values.initImage.tag }}"
        imagePullPolicy: "{{ .Values.initImage.pullPolicy }}"
        envFrom:
          - secretRef:
              name: "{{ tpl .Values.envFromSecret . }}"
        command:
          - /bin/sh
          - -c
          - dockerize -wait "tcp://$DB_HOST:$DB_PORT" -wait "tcp://$REDIS_HOST:$REDIS_PORT" -timeout 120s
    # -- Launch additional containers into supersetWorker pod
    extraContainers: []
    # -- Annotations to be added to supersetWorker deployment
    deploymentAnnotations: {}
    # -- Labels to be added to supersetWorker deployment
    deploymentLabels: {}
    # -- Affinity to be added to supersetWorker deployment
    affinity: {}
    # -- TopologySpreadConstrains to be added to supersetWorker deployments
    topologySpreadConstraints: []
    # -- Annotations to be added to supersetWorker pods
    podAnnotations: {}
    # -- Labels to be added to supersetWorker pods
    podLabels: {}
    # -- Resource settings for the supersetWorker pods - these settings overwrite might existing values from the global resources object defined above.
    resources: {}
      # limits:
      #  cpu: 100m
      #  memory: 128Mi
      # requests:
      #  cpu: 100m
      #  memory: 128Mi
    podSecurityContext: {}
    containerSecurityContext: {}
    strategy: {}
      # type: RollingUpdate
      # rollingUpdate:
      #   maxSurge: 25%
      #   maxUnavailable: 25%
    livenessProbe:
      exec:
        # -- Liveness probe command
        # @default -- a `celery inspect ping` command
        command:
          - sh
          - -c
          - celery -A superset.tasks.celery_app:app inspect ping -d celery@$HOSTNAME
      initialDelaySeconds: 120
      timeoutSeconds: 60
      failureThreshold: 3
      periodSeconds: 60
      successThreshold: 1
    # -- No startup/readiness probes by default since we don't really care about its startup time (it doesn't serve traffic)
    startupProbe: {}
    # -- No startup/readiness probes by default since we don't really care about its startup time (it doesn't serve traffic)
    readinessProbe: {}
