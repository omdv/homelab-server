---
# Service Account
apiVersion: v1
kind: ServiceAccount
metadata:
  name: headscale

---
# ConfigMap for Headscale configuration
apiVersion: v1
kind: ConfigMap
metadata:
  name: headscale-config
data:
  config.yaml: |
    server_url: https://tailscale.x9.rs
    listen_addr: 0.0.0.0:8000
    metrics_listen_addr: 0.0.0.0:9090
    grpc_listen_addr: 0.0.0.0:50443
    prefixes:
      v4: 100.77.0.0/24
      v6: fd7a:115c:a1e0:77::/64
      allocation: sequential
    dns:
      magic_dns: true
      base_domain: ts.x9.rs
      nameservers:
        global:
          - 1.1.1.1
          - 1.0.0.1
    derp:
      server:
        enabled: false
      urls:
        - https://controlplane.tailscale.com/derpmap/default
    disable_check_updates: true
    database:
      type: sqlite
      sqlite:
        path: /var/lib/headscale/db.sqlite
    noise:
      private_key_path: /var/lib/headscale/noise_private.key
    log:
      level: info

---
# PersistentVolumeClaim for Headscale data
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: pvc-headscale
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi

---
# PersistentVolume for Headscale data
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-headscale
  labels:
    app: headscale

spec:
  nodeAffinity:
    required:
      nodeSelectorTerms:
        - matchExpressions:
            - key: node-role.kubernetes.io/control-plane
              operator: Exists
  capacity:
    storage: 1Gi
  storageClassName: local-path
  accessModes:
    - ReadWriteOnce
  hostPath:
    path: /pool/config/headscale

---
# Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  name: headscale
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  selector:
    matchLabels:
      app: headscale
  template:
    metadata:
      labels:
        app: headscale
    spec:
      serviceAccountName: headscale
      containers:
        - name: headscale
          image: headscale/headscale:0.23.0
          args: ["serve"]
          ports:
            - containerPort: 8000
              name: http
            - containerPort: 9090
              name: metrics
            - containerPort: 50443
              name: grpc
          volumeMounts:
            - name: data
              mountPath: /var/lib/headscale
            - name: config
              mountPath: /etc/headscale/config.yaml
              subPath: config.yaml
          resources:
            requests:
              memory: "128Mi"
              cpu: "100m"
            limits:
              memory: "256Mi"
              cpu: "200m"

        - name: headscale-ui
          image: ghcr.io/gurucomputing/headscale-ui:2024.10.10
          ports:
            - containerPort: 8080
              name: ui
          env:
            - name: HEADSCALE_URL
              value: "https://tailscale.x9.rs"
          resources:
            requests:
              memory: "64Mi"
              cpu: "50m"
            limits:
              memory: "128Mi"
              cpu: "100m"

      volumes:
        - name: data
          persistentVolumeClaim:
            claimName: pvc-headscale
        - name: config
          configMap:
            name: headscale-config

---
# Service for Headscale
apiVersion: v1
kind: Service
metadata:
  name: headscale
spec:
  selector:
    app: headscale
  ports:
    - name: http
      port: 8000
      targetPort: http
    - name: metrics
      port: 9090
      targetPort: metrics
    - name: grpc
      port: 50443
      targetPort: grpc
    - name: ui
      port: 8080
      targetPort: ui

---
# Ingress for Headscale API
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: headscale-api
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - tailscale.x9.rs
      secretName: my-certs-headscale-api
  rules:
    - host: tailscale.x9.rs
      http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: headscale
                port:
                  number: 8000

---
# Ingress for Headscale UI
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: headscale-ui
  annotations:
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/auth-url: "https://auth.x9.rs/oauth2/auth"
    nginx.ingress.kubernetes.io/auth-signin: "https://auth.x9.rs/oauth2/start?rd=https://$host$uri"
    hajimari.io/enable: "true"
spec:
  ingressClassName: nginx
  tls:
    - hosts:
        - tailscale.x9.rs
      secretName: my-certs-headscale-ui
  rules:
    - host: tailscale.x9.rs
      http:
        paths:
          - path: /web
            pathType: Prefix
            backend:
              service:
                name: headscale
                port:
                  number: 8080

---
# NetworkPolicy
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: headscale
spec:
  podSelector:
    matchLabels:
      app: headscale
  policyTypes:
    - Ingress
  ingress:
    - from:
        - namespaceSelector: {}
      ports:
        - protocol: TCP
          port: 8000
        - protocol: TCP
          port: 9090
        - protocol: TCP
          port: 50443
        - protocol: TCP
          port: 8080
