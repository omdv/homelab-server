---
version: "3"

tasks:
  zfspv:
    desc: Install zfs-localpv
    dir: ./
    cmds:
      - "kubectl apply -f https://openebs.github.io/charts/zfs-operator.yaml"
      - "kubectl apply -f {{.CLUSTER_DIR}}/init/zfs-localpv/storage-class.yaml"
      - 'kubectl patch storageclass local-path -p ''{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"false"}}}'''
      - 'kubectl patch storageclass zfspv -p ''{"metadata": {"annotations":{"storageclass.kubernetes.io/is-default-class":"true"}}}'''

  vault:install:
    desc: Install vault
    dir: ./
    cmds:
      - "kubectl create namespace vault --dry-run=client -o yaml | kubectl apply -f -"
      - "kubectl create secret generic kms-creds -n vault --from-file={{.SECRETS_DIR}}/credentials.json --dry-run=client -o yaml | kubectl apply -f -"
      - "helm repo add hashicorp https://helm.releases.hashicorp.com && helm dependency update {{.CLUSTER_DIR}}/init/vault"
      - "helm status vault -n vault || helm install --wait --timeout 600s vault -n vault {{.CLUSTER_DIR}}/init/vault"

  vault:init:
    desc: Initialize vault, login, init pv, create appRole
    dir: ./
    cmds:
      - "kubectl exec -n vault vault-0 -- vault operator init -format=json > {{.SECRETS_DIR}}/vault-keys.json"
      - "export VAULT_TOKEN=$(cat {{.SECRETS_DIR}}/vault-keys.json | jq -r .root_token) && \
        envsubst < \"{{.PROJECT_DIR}}/tmpl/cluster/vault-token-secret.tmpl.yaml\" \
        > {{.SECRETS_DIR}}/vault-secret.yaml"
      - "kubectl exec -n vault vault-0 -- vault login $(cat {{.SECRETS_DIR}}/vault-keys.json | jq -r .root_token)"
      - "kubectl exec -n vault vault-0 -- vault secrets enable -version=2 kv"

  vault:delete:
    desc: Delete vault and reset pvc
    dir: ./
    cmds:
      - "helm delete vault -n vault"
      - "kubectl delete pvc/data-vault-0 -n vault"

  argo:install:
    desc: Install argo
    dir: ./
    cmds:
      - "kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -"
      - "helm dependency update {{.CLUSTER_DIR}}/init/argocd"
      - "helm install argocd -n argocd {{.CLUSTER_DIR}}/init/argocd"

  argo:init:
    desc: Initialize argo - expecting port-forward svc/argocd-server to 8080
    dir: ./
    cmds:
      - "argocd login localhost:8080 --insecure --username admin \
        --password $(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath='{.data.password}' | base64 -d)"
      - "argocd account update-password --current-password \
        $(kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath=\"{.data.password}\" | base64 -d) \
        --new-password {{.BOOTSTRAP_ARGOCD_PASSWORD}}"
      - "kubectl delete secret/argocd-initial-admin-secret -n argocd"
      - "argocd cluster add default --in-cluster --yes"

  argo:delete:
    desc: Uninstall argo
    dir: ./
    cmds:
      - "helm delete argocd -n argocd"

  secrets:install:
    desc: Install external-secrets
    dir: ./
    cmds:
      - "helm repo add external-secrets https://charts.external-secrets.io && helm repo update"
      - "helm install external-secrets external-secrets/external-secrets \
        -n external-secrets \
        --create-namespace \
        --set installCRDs=true \
        --wait"
      - "kubectl apply -f {{.SECRETS_DIR}}/vault-secret.yaml"
      - "kubectl apply -k {{.CLUSTER_DIR}}/init/external-secrets"

  secrets:delete:
    desc: Delete external-secrets
    dir: ./
    cmds:
      - "helm delete external-secrets -n external-secrets"
      - "kubectl delete $(kubectl get secret -n external-secrets --output name) -n external-secrets"

  install:
    desc: Full install
    dir: ./
    cmds:
      - task: zfspv
      - task: vault:install
      - "sleep 50s"
      - task: vault:init
      - "./configure.sh --vault"
      - "kubectl exec -n vault vault-0 -- vault kv get kv/secret/oauth2"
      - "kubectl exec -n vault vault-0 -- vault kv get kv/secret/wireguard"
      - task: secrets:install
      - task: argo:install
